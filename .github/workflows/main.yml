name: iOS CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest

    concurrency:
      group: ${{ github.ref }}  # Group jobs by branch
      cancel-in-progress: true  # Cancel any in-progress job for the same branch if a new push is triggered

    env:
      APP_IDENTIFIER: com.thinksys.xcodedemo
      APPLE_DEVELOPER_ACCOUNT: ${{ secrets.APPLE_DEVELOPER_ACCOUNT }}
      FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      API_KEY_ID: ${{ secrets.FASTLANE_API_KEY_ID }}
      API_ISSUER_ID: ${{ secrets.FASTLANE_API_ISSUER_ID }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_API_KEY_PATH: ${{ secrets.FASTLANE_API_KEY_PATH }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
      FASTLANE_API_KEY_KEY_ID: ${{ secrets.FASTLANE_API_KEY_KEY_ID }}
      FASTLANE_API_KEY_ISSUER_ID: ${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Build Step
      run: echo "Building for branch ${{ github.ref_name }}"

    # Set up Ruby (for Fastlane)
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0' # Specify your Ruby version here
        bundler-cache: true  # Caches installed gems for future runs

    # Install dependencies
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        gem install fastlane

    # Set up Apple Developer API Key
    - name: Set up Apple Developer API Key
      run: |
          echo '{
            "key_id": "${{ secrets.FASTLANE_API_KEY_KEY_ID }}",
            "issuer_id": "${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}",
            "key_content": "${{secrets.FASTLANE_API_KEY_P8}}"
          }' > api_key.json
          echo "${{ secrets.FASTLANE_API_KEY_P8 }}" > api_key.p8

    # Configure AWS CLI
    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    # Create and unlock keychain
    - name: Create Dynamic Fastlane Configuration
      run: |
        mkdir -p ./fastlane
        cat <<EOF > ./fastlane/Appfile
        apple_id("${{ secrets.FASTLANE_APPLE_ID }}")
        team_id("${{ secrets.TEAM_ID }}")
        itc_team_id("${{ secrets.ITC_TEAM_ID }}")
        app_identifier("${{ env.APP_IDENTIFIER }}")
        EOF

        # Create the Matchfile
        cat <<EOF > ./fastlane/Matchfile
        s3_bucket("${{secrets.S3_BUCKET_NAME}}")
        storage_mode("s3")
        type("appstore")
        app_identifier(["${{ env.APP_IDENTIFIER }}"])
        username("${{ secrets.FASTLANE_APPLE_ID }}")
        EOF

        cat <<EOF > ./fastlane/Fastfile
        default_platform(:ios)

        platform :ios do
          desc "Build and deploy to TestFlight"
          lane :beta do
            # Setting api_key for Build Number and Match
            api_key = app_store_connect_api_key(
                key_id: "${{ secrets.FASTLANE_API_KEY_KEY_ID }}",
                issuer_id: "${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}",
                key_content: "${{ secrets.FASTLANE_API_KEY_P8 }}"
            )

            # Fetch the latest build number from the App Store
            latest_build_number = app_store_build_number(
                api_key: api_key,
                app_identifier: ENV['APP_IDENTIFIER'],
                live: false
            )

            # Increment the build number
            new_build_number = latest_build_number.to_i + 1

            # Update the build number in the project
            increment_build_number(
                build_number: new_build_number.to_s
            )

            # Use match for managing provisioning profiles and certificates
            match(
                type: "appstore",
                readonly: false,
                api_key: api_key,
                team_id: ENV['TEAM_ID'],
                keychain_name: "ci-temp.keychain-db",
                keychain_password: ENV['KEYCHAIN_PASSWORD']
            )

            # Build the app targeting iOS 18.0 (simulator or device)
            build_app(
              scheme: "Xcode Demo",
              destination: "platform=iOS Simulator,name=iPhone 14,OS=18.0" # For simulator, or change to "platform=iOS,OS=18.0,name=iPhone 14" for devices
            )

            # Upload to TestFlight
            upload_to_testflight(
              username: ENV['FASTLANE_APPLE_ID'],
              skip_waiting_for_build_processing: true,
              app_identifier: ENV['APP_IDENTIFIER']
            )

            # Delete temp keychain
            delete_keychain(name: "ci-temp.keychain")
          end
        end
        EOF

    # Build and Deploy to TestFlight
    - name: Build and Deploy to TestFlight
      run: bundle exec fastlane ios beta

    # Notify Success
    - name: Notify Success
      if: success()
      run: echo "iOS Application successfully released to TestFlight."
