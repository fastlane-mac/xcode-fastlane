name: iOS CI/CD Pipeline

on:
  push:
    branches:
      - main
      # - staging
      # - production

jobs:
  build-and-deploy:
    runs-on: macos-latest

    env:
      APP_IDENTIFIER: com.thinksys.xcodemo
      # APP_IDENTIFIER: ${{ github.event.repository.name }}  # Bundle Identifier derived from repo name
      APPLE_DEVELOPER_ACCOUNT: ${{ secrets.APPLE_DEVELOPER_ACCOUNT }}
      FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      API_KEY_ID: ${{ secrets.FASTLANE_API_KEY_ID }}
      API_ISSUER_ID: ${{ secrets.FASTLANE_API_ISSUER_ID }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_API_KEY_PATH: ${{ secrets.FASTLANE_API_KEY_PATH }}
      # ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

   # 2. Set up Ruby (for Fastlane)
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0' # Specify your Ruby version here
        bundler-cache: true  # Caches installed gems for future runs

    # 3. Install dependencies (if you have a Gemfile and CocoaPods)
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        gem install fastlane

    - name: Configure Environment Variables based on Branch
      id: setup_env
      run: |
          echo "APP_ENV=development" >> $GITHUB_ENV
          echo "PROFILE=Development_Profile.mobileprovision" >> $GITHUB_ENV
          echo "CERTIFICATE=Dev_Certificate" >> $GITHUB_ENV
          echo "BUNDLE_ID=com.thinksys.xcode" >> $GITHUB_ENV
          echo "TESTFLIGHT_GROUP=InternalTesters" >> $GITHUB_ENV


    - name: Set Up AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        mkdir -p ~/.aws
        cat <<EOF > ~/.aws/credentials
        [default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EOF
        echo "[default]" > ~/.aws/config
        echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

    - name: Create Dynamic Fastlane Configuration
      run: |
        mkdir -p ./fastlane
        cat <<EOF > ./fastlane/Appfile
        apple_id("${{ secrets.FASTLANE_APPLE_ID }}")
        team_id("${{ secrets.APPLE_TEAM_ID }}")
        # itc_team_id("${{ secrets.ITC_TEAM_ID }}")
        app_identifier("${{ env.BUNDLE_ID }}")
        api_key_path("${{ secrets.FASTLANE_API_KEY_PATH }}")
        EOF
        
        cat <<EOF > ./fastlane/Fastfile
        default_platform(:ios)

        platform :ios do
          desc "Build and deploy to TestFlight"
          lane :beta do
            # Increment the build number
            increment_build_number(
              xcodeproj: "Xcode Demo.xcodeproj"
            )

            # Use match for managing provisioning profiles and certificates
            match(
              type: "appstore",
              storage_mode: "s3",
              bucket: "${{ secrets.S3_BUCKET_NAME }}",
              region: "${{ secrets.AWS_REGION }}",
              app_identifier: ENV['BUNDLE_ID'],
              readonly: true,
              username: ENV['FASTLANE_APPLE_ID'],
              team_id: ENV['TEAM_ID']
            )

            # Build the app
            build_app(
              # workspace: "MyApp.xcworkspace",
              scheme: "Xcode Demo",
              # export_method: "app-store",
              # output_name: "MyApp.ipa"
            )

            # Upload to TestFlight
            upload_to_testflight(
              username: ENV['FASTLANE_APPLE_ID']
              # skip_waiting_for_build_processing: true,
              # groups: ENV['TESTFLIGHT_GROUP']
            )
          end
        end
        EOF
    
    - name: checking Fastfile Configuration
      run: cat ./fastlane/Fastfile

    - name: Build and Deploy to TestFlight
      run: bundle exec fastlane beta

    # - name: Notify Success
    #   if: success()
    #   run: echo "iOS Application successfully released to TestFlight."
