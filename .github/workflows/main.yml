name: iOS CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       # - staging
#       ## - production
on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest

    env:
      APP_IDENTIFIER: com.thinksys.xcodemo
      # APP_IDENTIFIER: ${{ github.event.repository.name }}  # Bundle Identifier derived from repo name
      APPLE_DEVELOPER_ACCOUNT: ${{ secrets.APPLE_DEVELOPER_ACCOUNT }}
      FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      API_KEY_ID: ${{ secrets.FASTLANE_API_KEY_ID }}
      API_ISSUER_ID: ${{ secrets.FASTLANE_API_ISSUER_ID }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_API_KEY_PATH: ${{ secrets.FASTLANE_API_KEY_PATH }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
      FASTLANE_API_KEY_KEY_ID: ${{ secrets.FASTLANE_API_KEY_KEY_ID }}",
      FASTLANE_API_KEY_ISSUER_ID: ${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}",

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

   # 2. Set up Ruby (for Fastlane)
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0' # Specify your Ruby version here
        bundler-cache: true  # Caches installed gems for future runs

    # 3. Install dependencies (if you have a Gemfile and CocoaPods)
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        gem install fastlane
        
   # Set up Apple Developer API Key (combine secrets to create the api_key.json file)
    - name: Set up Apple Developer API Key
      run: |
          echo '{
            "key_id": "${{ secrets.FASTLANE_API_KEY_KEY_ID }}",
            "issuer_id": "${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}",
            "key_content": "${{secrets.FASTLANE_API_KEY_P8}}"
          }' > api_key.json
          echo "${{ secrets.FASTLANE_API_KEY_P8 }}" > api_key.p8

    - name: Configure Environment Variables based on Branch
      id: setup_env
      run: |
          echo "APP_ENV=development" >> $GITHUB_ENV
          echo "PROFILE=Development_Profile.mobileprovision" >> $GITHUB_ENV
          echo "CERTIFICATE=Dev_Certificate" >> $GITHUB_ENV
          echo "BUNDLE_ID=com.thinksys.xcode" >> $GITHUB_ENV
          echo "TESTFLIGHT_GROUP=InternalTesters" >> $GITHUB_ENV

    # Configure AWS CLI
    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Create and unlock keychain
      run: |
        security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} /Users/runner/Library/Keychains/ci-temp.keychain-db
        security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} /Users/runner/Library/Keychains/ci-temp.keychain-db
        security list-keychains -s /Users/runner/Library/Keychains/ci-temp.keychain-db
        security default-keychain -s /Users/runner/Library/Keychains/ci-temp.keychain-db
        security set-keychain-settings -t 3600 -l /Users/runner/Library/Keychains/ci-temp.keychain-db
        
    - name: Create Dynamic Fastlane Configuration
      run: |
        mkdir -p ./fastlane
        cat <<EOF > ./fastlane/Appfile
        apple_id("${{ secrets.FASTLANE_APPLE_ID }}")
        team_id("${{ secrets.APPLE_TEAM_ID }}")
        itc_team_id("${{ secrets.ITC_TEAM_ID }}")
        app_identifier("${{ env.BUNDLE_ID }}")
        api_key({
                key_id: "${{secrets.FASTLANE_API_KEY_KEY_ID}}",
                issuer_id: "${{secrets.FASTLANE_API_KEY_ISSUER_ID}}",
                key_content: "${{secrets.FASTLANE_API_KEY_P8}}"
        })
        EOF
        
        cat <<EOF > ./fastlane/Fastfile
        default_platform(:ios)

        platform :ios do
          desc "Build and deploy to TestFlight"
          lane :beta do
             # Increment the build number
             # Debug: Check the current build number before incrementing
             current_build_number = get_build_number(xcodeproj: "Xcode Demo.xcodeproj")
             puts "Current Build Number before increment: #{current_build_number}"

             # Increment the build number
             increment_build_number(
               build_number: (current_build_number+1).to_s,
               xcodeproj: "Xcode Demo.xcodeproj"
            )

            # Debug: Check the current build number after incrementing
            new_build_number = get_build_number(xcodeproj: "Xcode Demo.xcodeproj")
            puts "Current Build Number after increment: #{new_build_number}"

            # Debug output to check the build number
            build_number = get_build_number(xcodeproj: "Xcode Demo.xcodeproj")
            puts "Current Build Number after increment: #{build_number}"

            api_key = app_store_connect_api_key(
                key_id: "${{secrets.FASTLANE_API_KEY_KEY_ID}}",
                issuer_id: "${{secrets.FASTLANE_API_KEY_ISSUER_ID}}",
                key_content: "${{secrets.FASTLANE_API_KEY_P8}}"
              )
              
            # Use match for managing provisioning profiles and certificates
            match(type: "appstore",readonly: false,api_key: api_key,team_id:"${{secrets.TEAM_ID}}",keychain_name: "ci-temp.keychain-db",keychain_password: "${{secrets.KEYCHAIN_PASSWORD}}")

            # Build the app
            build_app(
              # workspace: "MyApp.xcworkspace",
              scheme: "Xcode Demo",
              # export_method: "app-store",
              # output_name: "MyApp.ipa"
            )

            # Upload to TestFlight
            upload_to_testflight(
              # api_key_path: "./api_key.json"
              username: ENV['FASTLANE_APPLE_ID']
              # skip_waiting_for_build_processing: true,
              # groups: ENV['TESTFLIGHT_GROUP']
            )

            #Delete temp keychain
            delete_keychain(name: "ci-temp.keychain")
          end
        end
        EOF
    
    - name: checking Fastfile Configuration
      run: cat ./fastlane/Fastfile

    - name: Build and Deploy to TestFlight
      run: bundle exec fastlane ios beta

    - name: Notify Success
      if: success()
      run: echo "iOS Application successfully released to TestFlight."
