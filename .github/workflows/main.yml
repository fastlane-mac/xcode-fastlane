name: iOS CI/CD Pipeline

on:
  # push:
  #   branches:
  #     - '**'  # This matches all branches
  # pull_request:
  #   branches:
  #     - '**'  # This matches all branches
  workflow_dispatch:
    inputs:
      version_type:
        description: "Select the version type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-deploy:
    runs-on: macos-latest

    concurrency:
      group: ${{ github.ref }}  # Group jobs by branch
      cancel-in-progress: true  # Cancel any in-progress job for the same branch if a new push is triggered

    env:
      APP_IDENTIFIER: com.thinksys.habitTracker
      APPLE_DEVELOPER_ACCOUNT: ${{ secrets.APPLE_DEVELOPER_ACCOUNT }}
      FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      API_KEY_ID: ${{ secrets.FASTLANE_API_KEY_ID }}
      API_ISSUER_ID: ${{ secrets.FASTLANE_API_ISSUER_ID }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_API_KEY_PATH: ${{ secrets.FASTLANE_API_KEY_PATH }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
      FASTLANE_API_KEY_KEY_ID: ${{ secrets.FASTLANE_API_KEY_KEY_ID }},
      FASTLANE_API_KEY_ISSUER_ID: ${{ secrets.FASTLANE_API_KEY_ISSUER_ID }},
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }},
      VERSION_TYPE: ${{ github.event.inputs.version_type }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set custom workspace
      run: |
        mkdir -p /Users/runner/custom_workspace/fastlane
        export CUSTOM_FASTLANE_DIR="/Users/runner/custom_workspace/fastlane"
        echo "Workspace set to $CUSTOM_FASTLANE_DIR"

    - name: Identify user running the job
      run: whoami
      
    - name: Build Step
      run: echo "Building for branch ${{ github.ref_name }}"
      
   # 2. Set up Ruby (for Fastlane)
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0' # Specify your Ruby version here
        bundler-cache: true  # Caches installed gems for future runs

    # 3. Install dependencies (if you have a Gemfile and CocoaPods)
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        gem install fastlane
        
   # Set up Apple Developer API Key (combine secrets to create the api_key.json file)
    - name: Set up Apple Developer API Key
      run: |
          echo '{
            "key_id": "${{ secrets.FASTLANE_API_KEY_KEY_ID }}",
            "issuer_id": "${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}",
            "key_content": "${{secrets.FASTLANE_API_KEY_P8}}"
          }' > api_key.json
          echo "${{ secrets.FASTLANE_API_KEY_P8 }}" > api_key.p8


    # Configure AWS CLI
    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Create and unlock keychain
      run: |
        security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} /Users/runner/Library/Keychains/ci-temp.keychain-db
        security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} /Users/runner/Library/Keychains/ci-temp.keychain-db
        security list-keychains -s /Users/runner/Library/Keychains/ci-temp.keychain-db
        security default-keychain -s /Users/runner/Library/Keychains/ci-temp.keychain-db
        security set-keychain-settings -t 3600 -l /Users/runner/Library/Keychains/ci-temp.keychain-db
        
    - name: Create Dynamic Fastlane Configuration
      run: |
        mkdir -p ./fastlane
        cat <<EOF >  ./fastlane/Appfile
        apple_id("${{ secrets.FASTLANE_APPLE_ID }}")
        team_id("${{ secrets.TEAM_ID }}")
        itc_team_id("${{ secrets.ITC_TEAM_ID }}")
        app_identifier("${{ env.APP_IDENTIFIER }}")
        EOF

        # Create the Matchfile
        cat <<EOF > ./fastlane/Matchfile
        s3_bucket("${{secrets.S3_BUCKET_NAME}}")
        storage_mode("s3")
        type("appstore")
        app_identifier(["${{ env.APP_IDENTIFIER }}"])
        username("${{ secrets.FASTLANE_APPLE_ID }}") # Your Apple Developer Portal username
        EOF

        cat <<EOF > ./fastlane/Fastfile
        default_platform(:ios)

        platform :ios do
          desc "Build and deploy to TestFlight"
          lane :beta do
            #Setting api_key for Build Number and Match
            api_key = app_store_connect_api_key(
                key_id: "${{secrets.FASTLANE_API_KEY_KEY_ID}}",
                issuer_id: "${{secrets.FASTLANE_API_KEY_ISSUER_ID}}",
                key_content: "${{secrets.FASTLANE_API_KEY_P8}}"
            )

            version = get_app_store_version_number(bundle_id: "${{ env.APP_IDENTIFIER }}")
            puts "Checking AppStore version number set: #{version}"

            # If no version is returned, handle it
            if version.nil? || version.empty?
              UI.user_error!("Failed to fetch the latest version number from the App Store.")
            end

            # Get the version type from GitHub Actions input (patch, minor, or major)
            version_type = ENV["VERSION_TYPE"] || "patch"  # Default to patch if not provided

            # Split the version into major, minor, patch components
            major, minor, patch = version.split('.').map(&:to_i)

            # Increment the version based on the specified version type
            case version_type
            when "major"
              major += 1
            when "minor"
              minor += 1
            when "patch"
              patch += 1
            else
              puts "invalid version type provided.defaulting to minor"
              minor +=1
            end

            # Build the new version string
            new_version = "#{major}.#{minor}.#{patch}"
            #empty commit
            puts "New version after increment: #{new_version}"

            increment_version_number(
              version_number: new_version,
              xcodeproj: "Xcode Demo.xcodeproj"
            )
    
            # puts "Fetched app version from App Store Connect: #{app_version}"  # Optional: print the app version for debugging
            # Fetch the latest build number from the App Store
            latest_build_number = app_store_build_number(
                api_key: api_key,
                app_identifier: ENV['APP_IDENTIFIER'],
                # version: app_version,
                live: false,
             )

            # Increment the build number
            new_build_number = latest_build_number.to_i + 1

            # Update the build number in the project
            increment_build_number(
                build_number: new_build_number.to_s,
                # xcodeproj: "YourProject.xcodeproj"
             )

            # Print the new build number for debugging
            puts "New build number after incrementing: #{new_build_number}"
              
            # Use match for managing provisioning profiles and certificates
            match(
                type: "appstore",
                readonly: false,
                api_key: api_key,
                team_id: "${{secrets.TEAM_ID}}",
                keychain_name: "ci-temp.keychain-db",
                keychain_password: "${{secrets.KEYCHAIN_PASSWORD}}"
            )

            
            # Build the app
            build_app(
              scheme: "Xcode Demo",
              archive_path: "/Users/runner/custom_workspace/Archives/#{Time.now.strftime('%Y-%m-%d')}/Xcode Demo #{Time.now.strftime('%Y-%m-%d %H.%M.%S')}.xcarchive",
              derived_data_path: "/Users/runner/custom_workspace/DerivedData",
              codesigning_identity: "Apple Distribution",
              export_options: {
                provisioningProfiles: {
                  "${{ env.APP_IDENTIFIER }}" => "match AppStore ${{ env.APP_IDENTIFIER }}"
                },
                marketingVersion: new_version
              },
              xcargs: "MARKETING_VERSION=#{new_version}"
            )

            #Upload to TestFlight
            upload_to_testflight(
              username: ENV['FASTLANE_APPLE_ID'],
              skip_waiting_for_build_processing: true,
              app_identifier: ENV['APP_IDENTIFIER'],
              app_version: new_version,
              uses_non_exempt_encryption: false
            )

            #Delete temp keychain
            delete_keychain(name: "ci-temp.keychain")
          end
        end
        EOF
    
    - name: Checking Fastfile Configuration
      run: cat ./fastlane/Fastfile

    - name: Build and Deploy to TestFlight
      run: bundle exec fastlane ios beta

    - name: Notify Success
      if: success()
      run: echo "iOS Application successfully released to TestFlight."
