name: new-pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Specify version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  build-and-deploy:
    runs-on: macos-latest

    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true

    env:
      APP_IDENTIFIER: com.thinksys.habitTracker
      APPLE_DEVELOPER_ACCOUNT: ${{ secrets.APPLE_DEVELOPER_ACCOUNT }}
      FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      API_KEY_ID: ${{ secrets.FASTLANE_API_KEY_ID }}
      API_ISSUER_ID: ${{ secrets.FASTLANE_API_ISSUER_ID }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_API_KEY_PATH: ${{ secrets.FASTLANE_API_KEY_PATH }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
      FASTLANE_API_KEY_KEY_ID: ${{ secrets.FASTLANE_API_KEY_KEY_ID }}
      FASTLANE_API_KEY_ISSUER_ID: ${{ secrets.FASTLANE_API_KEY_ISSUER_ID }}
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        gem install fastlane
        gem install fastlane-plugin-versioning
        fastlane add_plugin versioning

    - name: Increment Version
      id: versioning
      run: |
        #!/bin/bash
        set -e
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        BUNDLE_ID="${{ env.APP_IDENTIFIER }}"
        XC_PROJECT="Xcode Demo.xcodeproj"

        # Fetch the latest version from the App Store
        echo "Fetching the latest version number from App Store..."
        LATEST_VERSION=$(bundle exec fastlane run get_app_store_version_number bundle_id:"$BUNDLE_ID" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

        if [[ -z "$LATEST_VERSION" ]]; then
            echo "Failed to fetch the latest version from the App Store."
            exit 1
        fi

        echo "Latest version from App Store: $LATEST_VERSION"

        # Increment version based on the input type
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "Invalid version type: $VERSION_TYPE. Use major, minor, or patch."
            exit 1
            ;;
        esac

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version number: $NEW_VERSION"

        # Update the version in the Xcode project
        # echo "Updating version in Xcode project..."
        # bundle exec fastlane run increment_version_number version_number:"$NEW_VERSION" xcodeproj:"$XC_PROJECT"

        # echo "Version successfully updated to $NEW_VERSION in the Xcode project."

        # # Fetch and increment build number
        # LATEST_BUILD=$(bundle exec fastlane run app_store_build_number app_identifier:"$BUNDLE_ID" | grep -oE '[0-9]+')
        # NEW_BUILD=$((LATEST_BUILD + 1))

        # echo "Updating build number to: $NEW_BUILD"
        # bundle exec fastlane run increment_build_number build_number:"$NEW_BUILD"

        # echo "Build number successfully updated to $NEW_BUILD."

        # Export version and build for later steps
        echo "::set-output name=new_version::$NEW_VERSION"
        echo "::set-output name=new_build::$NEW_BUILD"

    # - name: Build and Deploy to TestFlight
    #   env:
    #     VERSION_TYPE: ${{ github.event.inputs.version_type }}
    #   run: bundle exec fastlane ios beta

    - name: Notify Success
      if: success()
      run: echo "iOS Application successfully released to TestFlight."
